{"version":3,"sources":["../../../src/layers/spatial-index-tile-layer.ts"],"names":["CartoSpatialTileLoader","isFeatureIdDefined","value","undefined","defaultProps","aggregationResLevel","SpatialIndexTileLayer","tile","props","data","getTileData","fetch","signal","url","Array","isArray","Promise","reject","loadOptions","getLoadOptions","formatTiles","TILE_FORMATS","BINARY","mimeType","propName","layer","params","oldProps","setState","tileset","info","hoveredFeatureId","state","hoveredFeature","object","newHoveredFeatureId","id","highlightColor","highlightedObjectIndex","getHighlightedObjectIndex","content","isFeatureIdPresent","findIndex","feature","TileLayer"],"mappings":"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","sourcesContent":["import {registerLoaders} from '@loaders.gl/core';\nimport {DefaultProps, UpdateParameters} from '@deck.gl/core';\nimport CartoSpatialTileLoader from './schema/carto-spatial-tile-loader';\nregisterLoaders([CartoSpatialTileLoader]);\n\nimport {PickingInfo} from '@deck.gl/core';\nimport {\n  TileLayer,\n  TileLayerProps,\n  _getURLFromTemplate,\n  _Tile2DHeader as Tile2DHeader,\n  _TileLoadProps as TileLoadProps\n} from '@deck.gl/geo-layers';\nimport {TILE_FORMATS} from '../api/maps-api-common';\n\nfunction isFeatureIdDefined(value: unknown): boolean {\n  return value !== undefined && value !== null && value !== '';\n}\n\nconst defaultProps: DefaultProps<SpatialIndexTileLayerProps> = {\n  aggregationResLevel: 4\n};\n\n/** All properties supported by SpatialIndexTileLayer. */\nexport type SpatialIndexTileLayerProps<DataT = any> = _SpatialIndexTileLayerProps<DataT> &\n  TileLayer<DataT>;\n\n/** Properties added by SpatialIndexTileLayer. */\ntype _SpatialIndexTileLayerProps<DataT> = {\n  aggregationResLevel?: number;\n};\n\nexport default class SpatialIndexTileLayer<DataT = any, ExtraProps = {}> extends TileLayer<\n  DataT,\n  ExtraProps & Required<_SpatialIndexTileLayerProps<DataT>>\n> {\n  static layerName = 'SpatialIndexTileLayer';\n  static defaultProps = defaultProps;\n\n  getTileData(tile: TileLoadProps) {\n    const {data, getTileData, fetch} = this.props;\n    const {signal} = tile;\n\n    tile.url =\n      typeof data === 'string' || Array.isArray(data) ? _getURLFromTemplate(data, tile) : null;\n    if (!tile.url) {\n      return Promise.reject('Invalid URL');\n    }\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n\n    let loadOptions = this.getLoadOptions();\n    // @ts-ignore\n    const {formatTiles} = this.props;\n\n    // The backend doesn't yet support our custom mime-type, so force it here\n    // TODO remove entire `getTileData` method once backend sends the correct mime-type\n    if (formatTiles === TILE_FORMATS.BINARY) {\n      loadOptions = {\n        ...loadOptions,\n        mimeType: 'application/vnd.carto-spatial-tile'\n      };\n    }\n\n    return fetch(tile.url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    const {props, oldProps} = params;\n    if (props.aggregationResLevel !== oldProps.aggregationResLevel) {\n      // Tileset cache is invalid when resLevel changes\n      this.setState({tileset: null});\n    }\n    super.updateState(params);\n  }\n\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    const {hoveredFeatureId} = this.state;\n    const hoveredFeature = info.object;\n    let newHoveredFeatureId;\n\n    if (hoveredFeature) {\n      newHoveredFeatureId = hoveredFeature.id;\n    }\n\n    if (hoveredFeatureId !== newHoveredFeatureId) {\n      let {highlightColor} = this.props;\n      if (typeof highlightColor === 'function') {\n        highlightColor = highlightColor(info);\n      }\n\n      this.setState({\n        highlightColor,\n        hoveredFeatureId: newHoveredFeatureId\n      });\n    }\n  }\n\n  getSubLayerPropsByTile(tile: Tile2DHeader) {\n    return {\n      highlightedObjectIndex: this.getHighlightedObjectIndex(tile),\n      highlightColor: this.state.highlightColor\n    };\n  }\n\n  getHighlightedObjectIndex(tile: Tile2DHeader) {\n    const {hoveredFeatureId} = this.state;\n    const data = tile.content;\n\n    const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId);\n    if (!isFeatureIdPresent || !Array.isArray(data)) {\n      return -1;\n    }\n\n    return data.findIndex(feature => feature.id === hoveredFeatureId);\n  }\n}\n"],"file":"spatial-index-tile-layer.js"}