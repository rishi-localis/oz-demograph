"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeckInstance = getDeckInstance;
exports.getInterleavedProps = getInterleavedProps;
exports.addLayer = addLayer;
exports.removeLayer = removeLayer;
exports.updateLayer = updateLayer;
exports.drawLayer = drawLayer;
exports.getViewState = getViewState;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("@deck.gl/core");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function getDeckInstance(_ref) {
  var map = _ref.map,
      gl = _ref.gl,
      deck = _ref.deck;

  if (map.__deck) {
    return map.__deck;
  }

  var customRender = deck === null || deck === void 0 ? void 0 : deck.props._customRender;
  var deckProps = getInterleavedProps(_objectSpread(_objectSpread({}, deck === null || deck === void 0 ? void 0 : deck.props), {}, {
    _customRender: function _customRender() {
      map.triggerRepaint();
      customRender === null || customRender === void 0 ? void 0 : customRender('');
    }
  }));
  var deckInstance;

  if (!deck || deck.props.gl === gl) {
    Object.assign(deckProps, {
      gl: gl,
      width: null,
      height: null,
      touchAction: 'unset',
      viewState: getViewState(map)
    });
    map.on('move', function () {
      return onMapMove(deckInstance, map);
    });
  }

  if (deck) {
    deckInstance = deck;
    deck.setProps(deckProps);
    deck.userData.isExternal = true;
  } else {
    deckInstance = new _core.Deck(deckProps);
    map.on('remove', function () {
      deckInstance.finalize();
      map.__deck = null;
    });
  }

  deckInstance.userData.mapboxLayers = new Set();
  deckInstance.userData.mapboxVersion = getMapboxVersion(map);
  map.__deck = deckInstance;
  map.on('render', function () {
    if (deckInstance.isInitialized) afterRender(deckInstance, map);
  });
  return deckInstance;
}

function getInterleavedProps(currProps) {
  var useDevicePixels = 'useDevicePixels' in currProps ? currProps.useDevicePixels : true;

  var nextProps = _objectSpread(_objectSpread({}, currProps), {}, {
    useDevicePixels: useDevicePixels,
    parameters: _objectSpread({
      depthMask: true,
      depthTest: true,
      blend: true,
      blendFunc: [770, 771, 1, 771],
      polygonOffsetFill: true,
      depthFunc: 515,
      blendEquation: 32774
    }, currProps.parameters),
    views: currProps.views || [new _core.MapView({
      id: 'mapbox'
    })]
  });

  return nextProps;
}

function addLayer(deck, layer) {
  deck.userData.mapboxLayers.add(layer);
  updateLayers(deck);
}

function removeLayer(deck, layer) {
  deck.userData.mapboxLayers.delete(layer);
  updateLayers(deck);
}

function updateLayer(deck, layer) {
  updateLayers(deck);
}

function drawLayer(deck, map, layer) {
  var _ref2 = deck.userData,
      currentViewport = _ref2.currentViewport;
  var clearStack = false;

  if (!currentViewport) {
    currentViewport = getViewport(deck, map, true);
    deck.userData.currentViewport = currentViewport;
    clearStack = true;
  }

  if (!deck.isInitialized) {
    return;
  }

  deck._drawLayers('mapbox-repaint', {
    viewports: [currentViewport],
    layerFilter: function layerFilter(_ref3) {
      var deckLayer = _ref3.layer;
      return layer.id === deckLayer.id;
    },
    clearStack: clearStack,
    clearCanvas: false
  });
}

function getViewState(map) {
  var _map$getCenter = map.getCenter(),
      lng = _map$getCenter.lng,
      lat = _map$getCenter.lat;

  return {
    longitude: (lng + 540) % 360 - 180,
    latitude: lat,
    zoom: map.getZoom(),
    bearing: map.getBearing(),
    pitch: map.getPitch(),
    padding: map.getPadding(),
    repeat: map.getRenderWorldCopies()
  };
}

function getMapboxVersion(map) {
  var major = 0;
  var minor = 0;
  var version = map.version;

  if (version) {
    var _version$split$slice$ = version.split('.').slice(0, 2).map(Number);

    var _version$split$slice$2 = (0, _slicedToArray2.default)(_version$split$slice$, 2);

    major = _version$split$slice$2[0];
    minor = _version$split$slice$2[1];
  }

  return {
    major: major,
    minor: minor
  };
}

function getViewport(deck, map) {
  var useMapboxProjection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var _ref4 = deck.userData,
      mapboxVersion = _ref4.mapboxVersion;
  return new _core.WebMercatorViewport(Object.assign({
    id: 'mapbox',
    x: 0,
    y: 0,
    width: deck.width,
    height: deck.height
  }, getViewState(map), useMapboxProjection ? {
    nearZMultiplier: mapboxVersion.major === 1 && mapboxVersion.minor >= 3 || mapboxVersion.major >= 2 ? 0.02 : 1 / (deck.height || 1)
  } : {
    nearZMultiplier: 0.1
  }));
}

function afterRender(deck, map) {
  var _ref5 = deck.userData,
      mapboxLayers = _ref5.mapboxLayers,
      isExternal = _ref5.isExternal;

  if (isExternal) {
    var mapboxLayerIds = Array.from(mapboxLayers, function (layer) {
      return layer.id;
    });
    var deckLayers = (0, _core._flatten)(deck.props.layers, Boolean);
    var hasNonMapboxLayers = deckLayers.some(function (layer) {
      return layer && !mapboxLayerIds.includes(layer.id);
    });
    var viewports = deck.getViewports();
    var mapboxViewportIdx = viewports.findIndex(function (vp) {
      return vp.id === 'mapbox';
    });
    var hasNonMapboxViews = viewports.length > 1 || mapboxViewportIdx < 0;

    if (hasNonMapboxLayers || hasNonMapboxViews) {
      if (mapboxViewportIdx >= 0) {
        viewports = viewports.slice();
        viewports[mapboxViewportIdx] = getViewport(deck, map, false);
      }

      deck._drawLayers('mapbox-repaint', {
        viewports: viewports,
        layerFilter: function layerFilter(params) {
          return (!deck.props.layerFilter || deck.props.layerFilter(params)) && (params.viewport.id !== 'mapbox' || !mapboxLayerIds.includes(params.layer.id));
        },
        clearCanvas: false
      });
    }
  }

  deck.userData.currentViewport = null;
}

function onMapMove(deck, map) {
  deck.setProps({
    viewState: getViewState(map)
  });
  deck.needsRedraw({
    clearRedrawFlags: true
  });
}

function updateLayers(deck) {
  if (deck.userData.isExternal) {
    return;
  }

  var layers = [];
  deck.userData.mapboxLayers.forEach(function (deckLayer) {
    var LayerType = deckLayer.props.type;
    var layer = new LayerType(deckLayer.props);
    layers.push(layer);
  });
  deck.setProps({
    layers: layers
  });
}
//# sourceMappingURL=deck-utils.js.map